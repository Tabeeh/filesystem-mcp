name: Release

on:
  push:
    tags:
      - 'v*.*.*' # Trigger only on push of version tags (e.g., v0.5.5)

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }} # Output the version for other jobs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Get package version
        id: get_version
        # Use tag name if available (for release), otherwise use package.json version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi

      - name: Archive build artifacts
        id: archive_build
        run: |
          tar -czf build-artifacts.tar.gz build/ package.json package-lock.json README.md CHANGELOG.md Dockerfile .dockerignore
          # Include any other files needed for publishing or release assets
          echo "archive_name=build-artifacts.tar.gz" >> $GITHUB_OUTPUT

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-archive # Upload the archive
          path: ${{ steps.archive_build.outputs.archive_name }}

  publish-npm:
    needs: build
    runs-on: ubuntu-latest
    # Only run on tag pushes for actual version releases
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download build artifacts archive
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-archive
          path: .

      - name: Extract build artifacts
        run: tar -xzf build-artifacts.tar.gz # Extract the archive from the current directory

      - name: Set up Node.js for npm publish
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Publish to npm
        # Assumes package.json version is correct for the tag
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-docker:
    needs: build
    runs-on: ubuntu-latest
    # Run on main branch pushes (for latest) and tag pushes (for versioned releases)
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    steps:
      - name: Download build artifacts archive
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-archive
          path: .

      - name: Extract build artifacts
        run: tar -xzf build-artifacts.tar.gz # Extract the archive from the current directory

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: shtse8/filesystem-mcp
          # Use tag name for version tags, otherwise use 'latest' for main branch
          tags: |
            # Tags based on the pushed version tag
            type=semver,pattern={{version}},value=${{ needs.build.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.build.outputs.version }}
            type=sha,prefix=,suffix=,event=tag # Sha for tags
            # Optionally add 'latest' tag for every version release, or manage manually
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: . # Context contains extracted artifacts and Dockerfile
          push: true # Always push when this job runs
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    needs: [publish-npm, publish-docker] # Run after both publish jobs succeed
    runs-on: ubuntu-latest
    # Only run on tag pushes
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write # Need permission to create releases
    steps:
      - name: Checkout repository (needed for CHANGELOG)
        uses: actions/checkout@v4

      - name: Download build artifacts archive
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-archive
          path: .

      # Optional: Extract changelog section for the release body
      # This requires a script or another action. For simplicity, we'll link to the file.
      # - name: Extract Changelog Entry
      #   id: changelog
      #   run: echo "body=$(some_script_to_extract_changelog_for ${{ github.ref_name }})" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            See [CHANGELOG.md](CHANGELOG.md) for details.
            ${{ steps.changelog.outputs.body || '' }}
          # files: build-artifacts-archive/build-artifacts.tar.gz # Attach the archive
          # Alternatively, extract and attach specific files if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}